// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: reward.proto

package rewardapipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RewardApiClient is the client API for RewardApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardApiClient interface {
	GetRewards(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type rewardApiClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardApiClient(cc grpc.ClientConnInterface) RewardApiClient {
	return &rewardApiClient{cc}
}

func (c *rewardApiClient) GetRewards(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rewardapi.RewardApi/GetRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardApiServer is the server API for RewardApi service.
// All implementations must embed UnimplementedRewardApiServer
// for forward compatibility
type RewardApiServer interface {
	GetRewards(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedRewardApiServer()
}

// UnimplementedRewardApiServer must be embedded to have forward compatible implementations.
type UnimplementedRewardApiServer struct {
}

func (UnimplementedRewardApiServer) GetRewards(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewards not implemented")
}
func (UnimplementedRewardApiServer) mustEmbedUnimplementedRewardApiServer() {}

// UnsafeRewardApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardApiServer will
// result in compilation errors.
type UnsafeRewardApiServer interface {
	mustEmbedUnimplementedRewardApiServer()
}

func RegisterRewardApiServer(s grpc.ServiceRegistrar, srv RewardApiServer) {
	s.RegisterService(&RewardApi_ServiceDesc, srv)
}

func _RewardApi_GetRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardApiServer).GetRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rewardapi.RewardApi/GetRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardApiServer).GetRewards(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RewardApi_ServiceDesc is the grpc.ServiceDesc for RewardApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rewardapi.RewardApi",
	HandlerType: (*RewardApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRewards",
			Handler:    _RewardApi_GetRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reward.proto",
}
